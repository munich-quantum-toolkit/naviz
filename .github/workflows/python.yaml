name: Python Wheel

# This workflow builds and publishes wheels for the python-bindings on new releases.
#
# The workflow was adapted from the one generated by `maturin generate-ci github`

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      publish:
        type: boolean
        description: "Publish the release"
        required: false
        default: false
      allPlatforms:
        type: boolean
        description: "Build for all platforms"
        required: false
        default: false

permissions:
  contents: read

jobs:
  generate-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Build Matrix
        env:
          FULL: ${{ inputs.allPlatforms }}
        id: matrix
        run: |
          matrix_full=$(cat << EOF
            [
              {
                "os": "linux",
                "image": "ubuntu-latest",
                "arch": ["x86_64", "x86", "aarch64", "armv7", "s390x", "ppc64le"],
                "manylinux": "auto"
              }, {
                "os": "musllinux",
                "image": "ubuntu-latest",
                "arch": ["x86_64", "x86", "aarch64", "armv7"],
                "manylinux": "musllinux_1_2"
              }, {
                "os": "macos",
                "image": "macos-latest",
                "arch": ["x86_64", "aarch64"]
              }, {
                "os": "windows",
                "image": "windows-latest",
                "arch": ["x86_64", "x86"]
              }
            ]
          EOF
          )
          matrix_small=$(cat << EOF
            [
              {
                "os": "linux",
                "image": "ubuntu-latest",
                "arch": ["x86_64", "aarch64"],
                "manylinux": "auto"
              }, {
                "os": "macos",
                "image": "macos-latest",
                "arch": ["x86_64", "aarch64"]
              }, {
                "os": "windows",
                "image": "windows-latest",
                "arch": ["x86_64"]
              }
            ]
          EOF
          )

          if [[ $FULL = true ]]
          then
            matrix_input="$matrix_full"
          else
            matrix_input="$matrix_small"
          fi

          echo matrix=$(printf "%s" "$matrix_input" | jq -rc 'map([.arch=.arch[]]) | flatten') > "$GITHUB_OUTPUT"

  build:
    needs: generate-matrix
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.image }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.arch }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: ${{ matrix.manylinux }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    if: ${{ github.event_name == 'release' || inputs.publish }}
    runs-on: ubuntu-latest
    needs: [build, sdist]
    environment:
      name: pypi
      url: https://pypi.org/p/mqt-naviz
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v5
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
